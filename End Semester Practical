#include <limits.h>
#include <stdio.h>
#include <stdlib.h>
 
// A binary tree consists of data, and left and right pointers
struct node {
    int data;
    struct node* left;
    struct node* right;
};

int isBSTUtil(struct node* node, int min, int max); //function that returns true if the given tree is a BST

 int isBST(struct node* node)
 {
    return (isBSTUtil(node, INT_MIN, INT_MAX));
 }

 int isBSTUtil(struct node* root, int min, int max) //function that returns true if the given tree is a BST and its values are >= min and <= max. 
 {
    if (root == NULL)
        return 1;
 
    
    if (root->data<min || root->data>max) //checking the subtrees recursively
        return 0;       
        
    return isBSTUtil(root->left, min, root->data - 1)
           && 
           isBSTUtil(root->right, root->data + 1, max); 
 }
 

 struct node* Create(int val) //function that allocates a new node with the given data and NULL to left and right pointers. 
 {
    struct node *p= (struct node*)malloc(sizeof(struct node));
    p->data = val;
    p->left=p->right=NULL;
 
    return (p);
 };
 

 int main()
 {
    struct node* root = Create(4);
    root->left = Create(2);
    root->right = Create(5);
    root->left->left = Create(1);
    root->left->right = Create(3);
 

    if (isBST(root)) //Function call
        printf("The Tree created with the input elements IS A BST");
    else
        printf("The tree created with the input elements IS NOT A BST !!!");
 
   return 0;
 }
